<plugins>
    <plugin name="TEST" class="it.jnrpe.plugin.test.CTestPlugin">
        <description>
        <![CDATA[
            This is just a test plugin. Invoke it passing the String you want to get back.
            Return:
            The return code is always 'OK'.
            The returned message is always to text you pass as parameter (-t/--text) 
            
            Example Command Definition (inside the server configuration, in the command section)
            
            <command name="test" plugin_name="TEST" params="-t $ARG1$"/>
            
            Example invocation:

            ./check_nrpe -n -H myhost -c test -a '-t Hello'
        ]]>
        </description>
        <command-line>
            <options>
                <option shortName="t" longName="text" description="the message to print" required="true" hasArgs="true" argName="text" optionalArgs="false"/> 
            </options>
        </command-line>
    </plugin>
    <plugin name="EXEC" class="it.jnrpe.plugin.CNativePlugin">
        <description>
        <![CDATA[
            This plugin is used to execute external (executable) application.
            (For example, classic Nagios plugins).
            
            Example Command Definition on a Windows OS (inside the server configuration, in the command section)
            
            <command name="check_disk" plugin_name="EXEC" 
            params="-e C:\PROGRA~2\nag-plugins\check_pdm.exe -a '--disk --drive $ARG1$ -w $ARG2$ -c $ARG3$'"/>
            
            Example invocation:

            ./check_nrpe -n -H myjnrpeserver -c check_disk -a 'c:!70!80'
            
        ]]>
        </description>
        <command-line>    
            <options>
                <option shortName="e" longName="executable" description="path to the executable" hasArgs="true" argName="path" required="true"/>
                <option shortName="a" longName="args" description="executable arguments" hasArgs="true" argName="args" />
            </options>
        </command-line>            
    </plugin>
    <plugin name="CHECK_ORACLE" class="it.jnrpe.plugin.CCheckOracle">
        <description>
        <![CDATA[
            This plugin is used to perform various check against an Oracle Database Server.
            This version is able to perform:
            * is alive check: checks if the database is alive, connecting to it and performing a 
              'SELECT SYSDATE FROM DUAL' query.
            * CACHE HIT RATE check :  Check the database for library and buffer cache hit ratios
            * TABLESPACE check: Check the usage of the given tablespace
            
            **** TO USE THIS PLUGIN, YOU MUST PUT THE ORACLE JDBC THIN DRIVER IN THE DIRECTORY WHERE
                 THIS PLUGIN IS INSTALLED!! 
            **** JDBC OCI DRIVER ARE NOT SUPPORTED!!
            
            Example Command Definitions on a Windows OS (inside the server configuration, in the command section)
            1. CHECK IS ALIVE
            <command name="check_oracle_alive" plugin_name="CHECK_ORACLE" 
            params="--username $ARG1$ --password $ARG2$ -db $ARG3$ 
            --server $ARG4$ --alive"/>
            
            Example invocation:
            ./check_nrpe -t 20 -n -H myjnrpeserver -c check_oracle_alive -a 'username!password!SID!server'
            
            2. CHECK TABLESPACE            
                        
            <command name="check_oracle_ts" plugin_name="CHECK_ORACLE" 
            params="--username $ARG1$ --password $ARG2$ -db $ARG3$ 
            --server $ARG4$ --tablespace $ARG5$ -w 70 -c 80"/>
            
            Example invocation:
            ./check_nrpe -t 20 -n -H myjnrpeserver -c check_oracle_ts -a 'username!password!SID!server!tablespacename'

            3. CHECK CACHE

            <command name="check_oracle_cache" plugin_name="CHECK_ORACLE" 
            params="--username $ARG1$ --password $ARG2$ -db $ARG3$ 
            --server $ARG4$ --cache -w 70 -c 80"/>
            
            Example invocation:
            ./check_nrpe -t 20 -n -H myjnrpeserver -c check_oracle_cache -a 'username!password!SID!server'

        ]]>
        </description>
        <command-line>    
            <options>
                <option shortName="d" longName="db" description="Orace SID" hasArgs="true" argName="SID" required="true" optionalArgs="false"/>
                <option shortName="s" longName="server" description="Database Server (IP or NAME)" hasArgs="true" argName="address" required="true" optionalArgs="false"/>
                <option shortName="l" longName="port" description="Database Server port (default: 1521)" hasArgs="true" argName="port" required="false" optionalArgs="false"/>
                <option shortName="u" longName="username" description="database username" hasArgs="true" argName="username" required="true" optionalArgs="false"/>
                <option shortName="p" longName="password" description="database password" hasArgs="true" argName="password" required="true" optionalArgs="false"/>
                <option shortName="t" longName="tablespace" description="Check the database for tablespace capacity in ORACLE_SID" hasArgs="true" argName="tablespace" required="false" optionalArgs="false"/>
                <option shortName="w" longName="warning" description="warning threshold" hasArgs="true" argName="threshold" required="false" optionalArgs="false"/>
                <option shortName="c" longName="critical" description="critical threshold" hasArgs="true" argName="threshold" required="false" optionalArgs="false"/>
                <option shortName="k" longName="cache" description="Check the database for library and buffer cache hit ratios" required="false" />
                <option shortName="a" longName="alive" description="Check if the database is alive" hasArgs="false" required="false" />
            </options>
        </command-line>            
    </plugin>
    <plugin name="CHECK_FILE" class="it.jnrpe.plugin.CCheckFile">
        <description>
        <![CDATA[
            This plugin is used to perform various check against files:
            * checks that a file exists (-f)
            * checks that a file does not exists (-F)
            * check file age (requires -f)
            * check file size (requires -f)
            * check how many lines of a file contains the given string. You can specify the warning and the critical range. (requires -f)
              EXAMPLE: -f /path/to/your/file --contains MyString,0:10,11:
            * check that a string is not inside the file (requires -f)
        ]]>
        </description>
        <command-line>    
            <options>
	            <option shortName="F" longName="FILE" hasArgs="true" argName="path" required="false" description="The path of the file the must not exist" />
            	<option shortName="f" longName="file" hasArgs="true" argName="path" required="false" description="The path to the file to check" />
                <option shortName="w" longName="warning" hasArgs="true" argName="age threshold" required="false" description="The max age (in seconds) before a warning is rised" />
                <option shortName="c" longName="critical" hasArgs="true" argName="age threshold" required="false" description="The max age (in seconds) before a critical is rised" />
                <option shortName="W" longName="sizewarning" hasArgs="true" argName="size threshold" required="false" description="The min file size (in bytes) before a warning is rised" />
                <option shortName="C" longName="sizecritical" hasArgs="true" argName="size threshold" required="false" description="The min file size (in bytes) before a critical is rised" />
                <option shortName="O" longName="contains" hasArgs="true" argName="string to check" required="false" description="The string that must be found inside the file in the format STRING,WARNING_RANGE,CRITICAL_RANGE." />                
                <option shortName="N" longName="notcontains" hasArgs="true" argName="string to check" required="false" description="The string that must not be found inside the file" />                
            </options>
        </command-line>            
    </plugin>
    <plugin name="CHECK_JMX" class="it.jnrpe.plugin.jmx.CCheckJMX">
		<description>
        <![CDATA[
            WARNING: THIS PLUGIN, REQUIRES JDK 1.5 OR GREATER!
            This plugin is used to test JMX values. It's based on 'jmxquery' (http://code.google.com/p/jmxquery/)
            Follows an example. For easiness, the parameters are shown as you would pass them on the command line.
            EXAMPLE (to monitor JBOSS memory usage):
            -U service:jmx:rmi://127.0.0.1/jndi/rmi://127.0.0.1:1090/jmxconnector -O jboss.system:type=ServerInfo -A TotalMemory -w 731847066: -c 1045495808 
        ]]>
        </description>    
        <command-line>    
            <options>
	            <option shortName="U" longName="url" hasArgs="true" argName="url" required="true" description="JMX URL, for example: 'service:jmx:rmi:///jndi/rmi://localhost:1616/jmxrmi'" />
	            <option shortName="O" longName="object" hasArgs="true" argName="name" required="true" description="Object name to be checked, for example, 'java.lang:type=Memory'" />
	            <option shortName="A" longName="attribute" hasArgs="true" argName="name" required="true" description="Attribute of the object to be checked, for example, 'NonHeapMemoryUsage'" />
	            <option shortName="K" longName="attributekey" hasArgs="true" argName="name" required="false" description="Attribute key for -A attribute compound data, for example, 'used'" />
	            <option shortName="I" longName="infoattribute" hasArgs="true" argName="name" required="false" description="Attribute of the object containing information for text output" />
	            <option shortName="J" longName="infokey" hasArgs="true" argName="name" required="false" description="Attribute key for -I attribute compound data, for example, 'used'" />
	            <option shortName="J" longName="infokey" hasArgs="true" argName="name" required="false" description="Attribute key for -I attribute compound data, for example, 'used'" />
                <option shortName="w" longName="warning" hasArgs="true" argName="range" required="true" description="Warning range" />
                <option shortName="c" longName="critical" hasArgs="true" argName="range" required="true" description="Critical range" />
                <option shortName="u" longName="username" hasArgs="true" argName="username" required="false" description="monitorRole jmx username" />
                <option shortName="p" longName="password" hasArgs="true" argName="password" required="false" description="monitorRole jmx password" />
	        </options>
	    </command-line>
    </plugin>
    
</plugins>